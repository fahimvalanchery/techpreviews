{
  "_args": [
    [
      {
        "raw": "@heroku-cli/plugin-spaces@^7.18.0",
        "scope": "@heroku-cli",
        "escapedName": "@heroku-cli%2fplugin-spaces",
        "name": "@heroku-cli/plugin-spaces",
        "rawSpec": "^7.18.0",
        "spec": ">=7.18.0 <8.0.0",
        "type": "range"
      },
      "C:\\Local Disk (E)\\Block Chain\\express\\assignment\\node_modules\\heroku"
    ]
  ],
  "_from": "@heroku-cli/plugin-spaces@^7.18.0",
  "_hasShrinkwrap": false,
  "_id": "@heroku-cli/plugin-spaces@7.18.0",
  "_location": "/@heroku-cli/plugin-spaces",
  "_nodeVersion": "10.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/plugin-spaces_7.18.0_1539753591781_0.1953897748192326"
  },
  "_npmUser": {
    "name": "dickeyxxx",
    "email": "dickeytk+npm@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@heroku-cli/plugin-spaces@^7.18.0",
    "scope": "@heroku-cli",
    "escapedName": "@heroku-cli%2fplugin-spaces",
    "name": "@heroku-cli/plugin-spaces",
    "rawSpec": "^7.18.0",
    "spec": ">=7.18.0 <8.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/heroku"
  ],
  "_resolved": "https://registry.npmjs.org/@heroku-cli/plugin-spaces/-/plugin-spaces-7.18.0.tgz",
  "_shasum": "d02ae460005d708f2462ca31b284217afedf62e9",
  "_shrinkwrap": null,
  "_spec": "@heroku-cli/plugin-spaces@^7.18.0",
  "_where": "C:\\Local Disk (E)\\Block Chain\\express\\assignment\\node_modules\\heroku",
  "author": {
    "name": "Heroku"
  },
  "bugs": {
    "url": "https://github.com/heroku/cli/issues"
  },
  "cli-engine": {
    "bin": "heroku",
    "topics": {
      "spaces": {
        "description": "manage heroku private spaces"
      },
      "trusted-ips": {
        "hidden": true
      }
    },
    "repositoryPrefix": "<%- repo %>/blob/v<%- version %>/packages/spaces/<%- commandPath %>"
  },
  "dependencies": {
    "@heroku-cli/command": "^8.2.0",
    "@heroku-cli/notifications": "^1.2.2",
    "co": "4.6.0",
    "heroku-cli-util": "^8.0.10",
    "lodash": "^4.17.11",
    "strftime": "^0.10.0"
  },
  "description": "Heroku plugin to manage Heroku Private Spaces",
  "devDependencies": {
    "@oclif/dev-cli": "^1.19.2",
    "@oclif/plugin-legacy": "^1.1.2",
    "chai": "^4.2.0",
    "chai-as-promised": "^7.1.1",
    "mocha": "^5.2.0",
    "nock": "^9.2.5",
    "nyc": "^13.1.0",
    "sinon": "^6.3.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-87ORd8Rfp5b2j809uC8C+/K3gzxIMZMK0MopIK5eM7/MTsSdDqscPv+vr2UjTSVYIYYRBd9Ck2BbjjnO1J0lmg==",
    "shasum": "d02ae460005d708f2462ca31b284217afedf62e9",
    "tarball": "https://registry.npmjs.org/@heroku-cli/plugin-spaces/-/plugin-spaces-7.18.0.tgz",
    "fileCount": 41,
    "unpackedSize": 104951,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbxsZ4CRA9TVsSAnZWagAAPMUP/3CVF4rRJ/qS8UrRdzDh\n1acgKkDae7e7w/+b2Q3h7knHazlz1HZY1FKEauIo0SmczMyl0TJsvLCn2fXb\nFSV1xCEmzl3mpGUw9qF/FSGNridgpiMlL697lmEWp3dRGymuVFoSrQC8enTA\nWjNqFIV+rs2cMTkm4nSWVOveDjjNRQhS+84mvs8SfcRHxM/6F4YQwJLgwd6p\nPOCgAkegZqLWRqtNSM2MHhC8Hik02mjRi7DCzEJKb/NPBpwFt4AtjFzh5OQ8\nTyeQC3XWNMibldKl3OhtnSQg5VaHiTHhIxRvxOXGz3XTNvteGJ4v5dgFBd7D\nCxKcU8UEKBAAJ87RVmMKbTqhXPJNDaGKUBE/PI+rsoR1IeZw7n/LdysvWqrs\nYRWpWrNTH7aiCOhhqe3gLgfo25z6DTVLEE7+7n7RAJTXG0fTKeFtuDpm1XoM\nt/VvuCSrDD0/D52DEfEINfBfsj9uBso1p8NO8ZKxLd0kDuflyos+mlugX1La\nWJ0JITpoWrjnhl04cvuGhAz5yCzVL6amaQp+/onc6oKUS1Q5WJLm/HJg0crQ\n0RuE9PnlfYHnUQLmmXl3vyAps0bdwbPsHF1+AZIpcakuT409vDsns0PAIRQJ\n7PY3mUKjq6gkh5lcRPMU9auqh9HetA4DCSayrpfBabLbc+AhlA7JYKRWrlAi\n4Qok\r\n=R0qF\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "oclif.manifest.json",
    "index.js",
    "commands",
    "lib"
  ],
  "homepage": "https://github.com/heroku/cli/tree/master/packages/spaces",
  "keywords": [
    "heroku-plugin"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "alindeman",
      "email": "andy@lindeman.io"
    },
    {
      "name": "alouie-sfdc",
      "email": "alouie@heroku.com"
    },
    {
      "name": "amanmibra",
      "email": "amanmibra@gmail.com"
    },
    {
      "name": "amerine",
      "email": "mark@amerine.net"
    },
    {
      "name": "bigkevmcd",
      "email": "kevin@bigkevmcd.com"
    },
    {
      "name": "brettgoulder",
      "email": "bgoulder@salesforce.com"
    },
    {
      "name": "codefinger",
      "email": "joe@heroku.com"
    },
    {
      "name": "cyberdelia",
      "email": "timothee.peignier@tryphon.org"
    },
    {
      "name": "cyx",
      "email": "cyx@cyx.is"
    },
    {
      "name": "dhaulagiri",
      "email": "brian.runnells+github@gmail.com"
    },
    {
      "name": "dickeyxxx",
      "email": "dickeytk+npm@gmail.com"
    },
    {
      "name": "dmathieu",
      "email": "damien@heroku.com"
    },
    {
      "name": "elbandito",
      "email": "longoria.public@gmail.com"
    },
    {
      "name": "halorgium",
      "email": "tim@spork.in"
    },
    {
      "name": "hone",
      "email": "hone02@gmail.com"
    },
    {
      "name": "idangazit",
      "email": "idan@gazit.me"
    },
    {
      "name": "itops",
      "email": "npmjs@heroku.com"
    },
    {
      "name": "joshwlewis",
      "email": "josh.w.lewis@gmail.com"
    },
    {
      "name": "mimen",
      "email": "miladmaaan@gmail.com"
    },
    {
      "name": "ojacobson",
      "email": "owen@grimoire.ca"
    },
    {
      "name": "ransombriggs",
      "email": "rbriggs@heroku.com"
    },
    {
      "name": "rasphilco",
      "email": "philipe@heroku.com"
    },
    {
      "name": "raulb",
      "email": "ra.barroso@gmail.com"
    },
    {
      "name": "ryanbrainard",
      "email": "ryan@ryanbrainard.com"
    },
    {
      "name": "sibson",
      "email": "sibson@gmail.com"
    },
    {
      "name": "sigmavirus24",
      "email": "graffatcolmingov+npm@gmail.com"
    },
    {
      "name": "stephenbarlow",
      "email": "sbarlow@heroku.com"
    },
    {
      "name": "troelsthomsen",
      "email": "troethom@gmail.com"
    },
    {
      "name": "uhoh-itsmaciek",
      "email": "m.sakrejda@gmail.com"
    },
    {
      "name": "yann_ck",
      "email": "yannick.schutz@gmail.com"
    }
  ],
  "name": "@heroku-cli/plugin-spaces",
  "optionalDependencies": {},
  "readme": "heroku-spaces CLI plugin [![Circle CI](https://circleci.com/gh/heroku/heroku-spaces.svg?style=svg&circle-token=99951d0283972db74af1fa0f5dc179ebf6d85963)](https://circleci.com/gh/heroku/heroku-spaces)\n===========\n\n[![npm version](https://img.shields.io/npm/v/@heroku-cli/plugin-spaces.svg)](https://www.npmjs.com/package/@heroku-cli/plugin-spaces)\n\n<!-- commands -->\n* [`heroku spaces`](#heroku-spaces)\n* [`heroku spaces:create`](#heroku-spacescreate)\n* [`heroku spaces:destroy`](#heroku-spacesdestroy)\n* [`heroku spaces:info`](#heroku-spacesinfo)\n* [`heroku spaces:peering:info`](#heroku-spacespeeringinfo)\n* [`heroku spaces:peerings`](#heroku-spacespeerings)\n* [`heroku spaces:peerings:accept`](#heroku-spacespeeringsaccept)\n* [`heroku spaces:peerings:destroy`](#heroku-spacespeeringsdestroy)\n* [`heroku spaces:ps`](#heroku-spacesps)\n* [`heroku spaces:rename`](#heroku-spacesrename)\n* [`heroku spaces:topology`](#heroku-spacestopology)\n* [`heroku spaces:vpn:config`](#heroku-spacesvpnconfig)\n* [`heroku spaces:vpn:connect`](#heroku-spacesvpnconnect)\n* [`heroku spaces:vpn:connections`](#heroku-spacesvpnconnections)\n* [`heroku spaces:vpn:destroy`](#heroku-spacesvpndestroy)\n* [`heroku spaces:vpn:info`](#heroku-spacesvpninfo)\n* [`heroku spaces:vpn:wait`](#heroku-spacesvpnwait)\n* [`heroku spaces:wait`](#heroku-spaceswait)\n* [`heroku trusted-ips`](#heroku-trusted-ips)\n* [`heroku trusted-ips:add SOURCE`](#heroku-trusted-ipsadd-source)\n* [`heroku trusted-ips:remove SOURCE`](#heroku-trusted-ipsremove-source)\n\n## `heroku spaces`\n\nlist available spaces\n\n```\nUSAGE\n  $ heroku spaces\n\nOPTIONS\n  -t, --team=team  team to use\n  --json           output in json format\n```\n\n## `heroku spaces:create`\n\ncreate a new space\n\n```\nUSAGE\n  $ heroku spaces:create\n\nOPTIONS\n  -s, --space=space      name of space to create\n  -t, --team=team        team to use\n  --cidr=cidr            RFC-1918 CIDR the space will use\n  --data-cidr=data-cidr  RFC-1918 CIDR used by Heroku Data resources for the space\n  --region=region        region name\n\nDESCRIPTION\n  Example:\n\n       $ heroku spaces:create --space my-space --team my-team --region oregon\n       Creating space my-space in team my-team... done\n       === my-space\n       ID:         e7b99e37-69b3-4475-ad47-a5cc5d75fd9f\n       Team:       my-team\n       Region:     oregon\n       CIDR:       10.0.0.0/16\n       Data CIDR:  172.23.0.0/20\n       State:      allocating\n       Created at: 2016-01-06T03:23:13Z\n```\n\n## `heroku spaces:destroy`\n\ndestroy a space\n\n```\nUSAGE\n  $ heroku spaces:destroy\n\nOPTIONS\n  -s, --space=space  space to destroy\n  --confirm=confirm  set to space name to bypass confirm prompt\n\nDESCRIPTION\n  Example:\n\n       $ heroku spaces:destroy --space my-space\n       Destroying my-space... done\n```\n\n## `heroku spaces:info`\n\nshow info about a space\n\n```\nUSAGE\n  $ heroku spaces:info\n\nOPTIONS\n  -s, --space=space  space to get info of\n  --json             output in json format\n```\n\n## `heroku spaces:peering:info`\n\ndisplay the information necessary to initiate a peering connection\n\n```\nUSAGE\n  $ heroku spaces:peering:info\n\nOPTIONS\n  -s, --space=space  space to get peering info from\n  --json             output in json format\n\nDESCRIPTION\n  Example:\n\n       $ heroku spaces:peering:info example-space\n       === example-space Peering Info\n       AWS Account ID:    012345678910\n       AWS Region:        us-west-2\n       AWS VPC ID:        vpc-baadf00d\n       AWS VPC CIDR:      10.0.0.0/16\n       Space CIDRs:       10.0.128.0/20, 10.0.144.0/20\n       Unavailable CIDRs: 10.1.0.0/16\n\n  You will use the information provied by this command to establish a peering connection request from your AWS VPC to \n  your private space.\n\n  To start the peering process, go into your AWS console for the VPC you would like peered with your Private Space,\n  navigate to the VPC service, choose the \"Peering Connections\" option and click the \"Create peering connection\" button.\n\n  - The AWS Account ID and VPC ID are necessary for the AWS VPC Peering connection wizard.\n  - You will also need to configure your VPC route table to route the Dyno CIDRs through the peering connection.\n\n  Once you've established the peering connection request, you can use the spaces:peerings:accept command to accept and\n  configure the peering connection for the space.\n```\n\n## `heroku spaces:peerings`\n\nlist peering connections for a space\n\n```\nUSAGE\n  $ heroku spaces:peerings\n\nOPTIONS\n  -s, --space=space  space to get peer list from\n  --json             output in json format\n```\n\n## `heroku spaces:peerings:accept`\n\naccepts a pending peering request for a private space\n\n```\nUSAGE\n  $ heroku spaces:peerings:accept\n\nOPTIONS\n  -p, --pcxid=pcxid  PCX ID of a pending peering\n  -s, --space=space  space to get peering info from\n\nDESCRIPTION\n  Example:\n\n       $ heroku spaces:peerings:accept pcx-4bd27022 --space example-space\n       Accepting and configuring peering connection pcx-4bd27022\n```\n\n## `heroku spaces:peerings:destroy`\n\ndestroys an active peering connection in a private space\n\n```\nUSAGE\n  $ heroku spaces:peerings:destroy\n\nOPTIONS\n  -p, --pcxid=pcxid  PCX ID of a pending peering\n  -s, --space=space  space to get peering info from\n  --confirm=confirm  set to PCX ID to bypass confirm prompt\n\nDESCRIPTION\n  Example:\n\n       $ heroku spaces:peerings:destroy pcx-4bd27022 --confirm pcx-4bd27022 --space example-space\n       Tearing down peering connection pcx-4bd27022\n```\n\n## `heroku spaces:ps`\n\nlist dynos for a space\n\n```\nUSAGE\n  $ heroku spaces:ps\n\nOPTIONS\n  -s, --space=space  space to get dynos of\n  --json             output in json format\n```\n\n## `heroku spaces:rename`\n\nrenames a space\n\n```\nUSAGE\n  $ heroku spaces:rename\n\nOPTIONS\n  --from=from  (required) current name of space\n  --to=to      (required) desired name of space\n\nDESCRIPTION\n  Example:\n\n       $ heroku spaces:rename --from old-space-name --to new-space-name\n       Renaming space old-space-name to new-space-name... done\n```\n\n## `heroku spaces:topology`\n\nshow space topology\n\n```\nUSAGE\n  $ heroku spaces:topology\n\nOPTIONS\n  -s, --space=space  space to get topology of\n  --json             output in json format\n```\n\n## `heroku spaces:vpn:config`\n\ndisplay the configuration information for VPN\n\n```\nUSAGE\n  $ heroku spaces:vpn:config\n\nOPTIONS\n  -n, --name=name    name or id of the VPN connection to retrieve config from\n  -s, --space=space  space the VPN connection belongs to\n  --json             output in json format\n\nDESCRIPTION\n  Example:\n\n       $ heroku spaces:vpn:config --space my-space vpn-connection-name\n       === vpn-connection-name VPN Tunnels\n       VPN Tunnel  Customer Gateway  VPN Gateway     Pre-shared Key  Routable Subnets  IKE Version\n       ──────────  ────────────────  ──────────────  ──────────────  ────────────────  ───────────\n       Tunnel 1    104.196.121.200   35.171.237.136  abcdef12345     10.0.0.0/16       1\n       Tunnel 2    104.196.121.200   52.44.7.216     fedcba54321     10.0.0.0/16       1\n\n  You will use the information provided by this command to establish a Private Space VPN Connection.\n\n  - You must configure your VPN Gateway to use both Tunnels provided by Heroku\n  - The VPN Gateway values are the IP addresses of the Private Space Tunnels\n  - The Customer Gateway value is the Public IP of your VPN Gateway\n  - The VPN Gateway must use the IKE Version shown and the Pre-shared Keys as the authentication method\n```\n\n## `heroku spaces:vpn:connect`\n\ncreate VPN\n\n```\nUSAGE\n  $ heroku spaces:vpn:connect\n\nOPTIONS\n  -c, --cidrs=cidrs  a list of routable CIDRs separated by commas\n  -i, --ip=ip        public IP of customer gateway\n  -n, --name=name    VPN name\n  -s, --space=space  space name\n\nDESCRIPTION\n  Private Spaces can be connected to another private network via an IPSec VPN connection allowing dynos to connect to \n  hosts on your private networks and vice versa.\n  The connection is established over the public Internet but all traffic is encrypted using IPSec.\n\nEXAMPLES\n  $ heroku spaces:vpn:connect --name office --ip 35.161.69.30 --cidrs 172.16.0.0/16,10.0.0.0/24 --space my-space\n       Creating VPN Connection in space my-space... done\n       ▸    Use spaces:vpn:wait to track allocation.\n```\n\n## `heroku spaces:vpn:connections`\n\nlist the VPN Connections for a space\n\n```\nUSAGE\n  $ heroku spaces:vpn:connections\n\nOPTIONS\n  -s, --space=space  space to get VPN connections from\n  --json             output in json format\n\nDESCRIPTION\n  Example:\n\n     $ heroku spaces:vpn:connections --space my-space\n     === my-space VPN Connections\n     Name    Status  Tunnels\n     ──────  ──────  ───────\n     office  active  UP/UP\n```\n\n## `heroku spaces:vpn:destroy`\n\ndestroys VPN in a private space\n\n```\nUSAGE\n  $ heroku spaces:vpn:destroy\n\nOPTIONS\n  -n, --name=name    name or id of the VPN connection to retrieve config from\n  -s, --space=space  space to get peering info from\n  --confirm=confirm  set to VPN connection name to bypass confirm prompt\n\nDESCRIPTION\n  Example:\n\n       $ heroku spaces:vpn:destroy --space example-space vpn-connection-name --confirm vpn-connection-name\n       Tearing down VPN Connection vpn-connection-name in space example-space\n```\n\n## `heroku spaces:vpn:info`\n\ndisplay the information for VPN\n\n```\nUSAGE\n  $ heroku spaces:vpn:info\n\nOPTIONS\n  -n, --name=name    name or id of the VPN connection to get info from\n  -s, --space=space  space the vpn connection belongs to\n  --json             output in json format\n\nDESCRIPTION\n  Example:\n\n       $ heroku spaces:vpn:info --space my-space vpn-connection-name\n       === vpn-connection-name VPN Tunnel Info\n       Name:           vpn-connection-name\n       ID:             123456789012\n       Public IP:      35.161.69.30\n       Routable CIDRs: 172.16.0.0/16\n       Status:         failed\n       Status Message: supplied CIDR block already in use\n       === my-space Tunnel Info\n       VPN Tunnel  IP Address     Status  Status Last Changed   Details\n       ──────────  ─────────────  ──────  ────────────────────  ──────────────\n       Tunnel 1    52.44.146.197  UP      2016-10-25T22:09:05Z  status message\n       Tunnel 2    52.44.146.197  UP      2016-10-25T22:09:05Z  status message\n```\n\n## `heroku spaces:vpn:wait`\n\nwait for VPN Connection to be created\n\n```\nUSAGE\n  $ heroku spaces:vpn:wait\n\nOPTIONS\n  -i, --interval=interval  seconds to wait between poll intervals\n  -n, --name=name          name or id of the vpn connection to wait for\n  -s, --space=space        space the vpn connection belongs to\n  -t, --timeout=timeout    maximum number of seconds to wait\n  --json                   output in json format\n```\n\n## `heroku spaces:wait`\n\nwait for a space to be created\n\n```\nUSAGE\n  $ heroku spaces:wait\n\nOPTIONS\n  -i, --interval=interval  seconds to wait between poll intervals\n  -s, --space=space        space to get info of\n  -t, --timeout=timeout    maximum number of seconds to wait\n  --json                   output in json format\n```\n\n## `heroku trusted-ips`\n\nlist trusted IP ranges for a space\n\n```\nUSAGE\n  $ heroku trusted-ips\n\nOPTIONS\n  -s, --space=space  space to get inbound rules from\n  --json             output in json format\n\nDESCRIPTION\n  Trusted IP ranges are only available on Private Spaces.\n\n  The space name is a required parameter. Newly created spaces will have 0.0.0.0/0 set by default\n  allowing all traffic to applications in the space. More than one CIDR block can be provided at\n  a time to the commands listed below. For example 1.2.3.4/20 and 5.6.7.8/20 can be added with:\n```\n\n## `heroku trusted-ips:add SOURCE`\n\nAdd one range to the list of trusted IP ranges\n\n```\nUSAGE\n  $ heroku trusted-ips:add SOURCE\n\nOPTIONS\n  -s, --space=space  space to add rule to\n  --confirm=confirm  set to space name to bypass confirm prompt\n\nDESCRIPTION\n  Uses CIDR notation.\n\n  Example:\n\n       $ heroku trusted-ips:add --space my-space 192.168.2.0/24\n       Added 192.168.0.1/24 to trusted IP ranges on my-space\n```\n\n## `heroku trusted-ips:remove SOURCE`\n\nRemove a range from the list of trusted IP ranges\n\n```\nUSAGE\n  $ heroku trusted-ips:remove SOURCE\n\nOPTIONS\n  --confirm=confirm  set to space name to bypass confirm prompt\n  --space=space      (required) space to remove rule from\n\nDESCRIPTION\n  Uses CIDR notation.\n\n  Example:\n\n       $ heroku trusted-ips:remove --space my-space 192.168.2.0/24\n       Removed 192.168.2.0/24 from trusted IP ranges on my-space\n```\n<!-- commandsstop -->\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/heroku/cli.git"
  },
  "scripts": {
    "postpublish": "rm oclif.manifest.json",
    "posttest": "standard",
    "prepack": "oclif-dev manifest",
    "test": "nyc mocha",
    "version": "oclif-dev readme && git add README.md"
  },
  "version": "7.18.0"
}
