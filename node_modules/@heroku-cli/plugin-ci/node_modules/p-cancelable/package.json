{
  "_args": [
    [
      {
        "raw": "p-cancelable@0.5.1",
        "scope": null,
        "escapedName": "p-cancelable",
        "name": "p-cancelable",
        "rawSpec": "0.5.1",
        "spec": "0.5.1",
        "type": "version"
      },
      "C:\\Local Disk (E)\\Block Chain\\express\\assignment\\node_modules\\@heroku-cli\\plugin-ci"
    ]
  ],
  "_from": "p-cancelable@0.5.1",
  "_hasShrinkwrap": false,
  "_id": "p-cancelable@0.5.1",
  "_location": "/@heroku-cli/plugin-ci/p-cancelable",
  "_nodeVersion": "8.11.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/p-cancelable_0.5.1_1536597133529_0.9791231164444081"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "p-cancelable@0.5.1",
    "scope": null,
    "escapedName": "p-cancelable",
    "name": "p-cancelable",
    "rawSpec": "0.5.1",
    "spec": "0.5.1",
    "type": "version"
  },
  "_requiredBy": [
    "/@heroku-cli/plugin-ci",
    "/@heroku-cli/plugin-ci/got"
  ],
  "_resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-0.5.1.tgz",
  "_shasum": "b797a33c43c645cd70d5a838b1d25352b9e29e75",
  "_shrinkwrap": null,
  "_spec": "p-cancelable@0.5.1",
  "_where": "C:\\Local Disk (E)\\Block Chain\\express\\assignment\\node_modules\\@heroku-cli\\plugin-ci",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/p-cancelable/issues"
  },
  "dependencies": {},
  "description": "Create a promise that can be canceled",
  "devDependencies": {
    "ava": "*",
    "delay": "^3.0.0",
    "promise.prototype.finally": "^3.1.0",
    "xo": "^0.23.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-vkOBXQgQb03QTOoMeeB5/uS2W3iafXzQLaIh7ChHjEb8DDT06sWJizhdOACL1Sittl5dFqsyumJ4rD1WUF8Isw==",
    "shasum": "b797a33c43c645cd70d5a838b1d25352b9e29e75",
    "tarball": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-0.5.1.tgz",
    "fileCount": 4,
    "unpackedSize": 7724,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJblpyOCRA9TVsSAnZWagAAmAoP/j2qfNZtIo31F3s2LOlM\npcy5ZwceNtPlth0py0LHXkOnMwBguQ3U74qoqrogLOwnEaf+Uo4n4NMwJ9A0\nHyvjK4FTp/vawWvyOAYdhfUnspYHGfUVN3wVGR+BOliV+i6axeZuVgK2W9WX\nlxHVdfm8lhcaxOO8b42iamCWTjcASlFTqvNUzQbW5jT8LLw/Fvj4o+F9dKmE\nM4RmIzfXmvY/wNJrDgOVuy1mM8Tg6enOBIaK1yLCVcBnWZtbm7C24CbUkmxO\n0aOBiO4ATJ3ZtzbTks0egtWBYCt72wCIyyCVrYn7NeOKqeSUgRbHRxlcZshJ\nKJ0PJHfCezHssGBh6TIgIAL/lD77RK3i8tqriBLaIxxy01as6PqT+FjHfrhE\nEHyplFkSBXOCGiB53WkX4h2ghBZg8uI2znEMoz5RIqAtaupK8YDz7bRQUK7Z\ndyrpdfIVLAlL2egLOrU0PDFAbzGYbyjIHObd7R01z0aSS+UgwByU2Hu5p2wu\n8HNx6uMMM6xM9yACrpsZjkMybGVzej5MaeLpg2m0m6i6Mh/Gry4L03JN5kbw\nrUlx6Rnr0MGuuzulMc3sft/6zs8zL3KEYPRQWySlkvt5E171QM0NdNHywN4v\nTrajXow63H/Lw6gjGtxgpZlhFwbuOUUijhN192r1LU/F+sD7PkiXCjS87NZZ\ncL7a\r\n=DMF0\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "b7e75aa16c846286e7426b31d659dd1a6da09fb5",
  "homepage": "https://github.com/sindresorhus/p-cancelable#readme",
  "keywords": [
    "promise",
    "cancelable",
    "cancel",
    "canceled",
    "canceling",
    "cancellable",
    "cancellation",
    "abort",
    "abortable",
    "aborting",
    "cleanup",
    "task",
    "token",
    "async",
    "function",
    "await",
    "promises",
    "bluebird"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "p-cancelable",
  "optionalDependencies": {},
  "readme": "# p-cancelable [![Build Status](https://travis-ci.org/sindresorhus/p-cancelable.svg?branch=master)](https://travis-ci.org/sindresorhus/p-cancelable)\n\n> Create a promise that can be canceled\n\nUseful for animation, loading resources, long-running async computations, async iteration, etc.\n\n\n## Install\n\n```\n$ npm install p-cancelable\n```\n\n\n## Usage\n\n```js\nconst PCancelable = require('p-cancelable');\n\nconst cancelablePromise = new PCancelable((resolve, reject, onCancel) => {\n\tconst worker = new SomeLongRunningOperation();\n\n\tonCancel(() => {\n\t\tworker.close();\n\t});\n\n\tworker.on('finish', resolve);\n\tworker.on('error', reject);\n});\n\n(async () => {\n\ttry {\n\t\tconsole.log('Operation finished successfully:', await cancelablePromise);\n\t} catch (error) {\n\t\tif (cancelablePromise.isCanceled) {\n\t\t\t// Handle the cancelation here\n\t\t\tconsole.log('Operation was canceled');\n\t\t\treturn;\n\t\t}\n\n\t\tthrow error;\n\t}\n})();\n\n// Cancel the operation after 10 seconds\nsetTimeout(() => {\n\tcancelablePromise.cancel('Unicorn has changed its color');\n}, 10000);\n```\n\n\n## API\n\n### new PCancelable(executor)\n\nSame as the [`Promise` constructor](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise), but with an appended `onCancel` parameter in `executor`.<br>\nCancelling will reject the promise with `PCancelable.CancelError`. To avoid that, set `onCancel.shouldReject` to `false`.\n\n```js\nconst cancelable = new PCancelable((resolve, reject, onCancel) => {\n\tconst job = new Job();\n\n\tonCancel.shouldReject = false;\n\tonCancel(() => {\n\t\tjob.stop();\n\t});\n\n\tjob.on('finish', resolve);\n});\n\npromise.cancel(); // Doesn't throw an error\n```\n\n`PCancelable` is a subclass of `Promise`.\n\n#### onCanceled(fn)\n\nType: `Function`\n\nAccepts a function that is called when the promise is canceled.\n\nYou're not required to call this function. You can call this function multiple times to add multiple cancel handlers.\n\n### PCancelable#cancel([reason])\n\nType: `Function`\n\nCancel the promise and optionally provide a reason.\n\nThe cancellation is synchronous. Calling it after the promise has settled or multiple times does nothing.\n\n### PCancelable#isCanceled\n\nType: `boolean`\n\nWhether the promise is canceled.\n\n### PCancelable.CancelError\n\nType: `Error`\n\nRejection reason when `.cancel()` is called.\n\nIt includes a `.isCanceled` property for convenience.\n\n### PCancelable.fn(fn)\n\nConvenience method to make your promise-returning or async function cancelable.\n\nThe function you specify will have `onCancel` appended to its parameters.\n\n```js\nconst fn = PCancelable.fn((input, onCancel) => {\n\tconst job = new Job();\n\n\tonCancel(() => {\n\t\tjob.cleanup();\n\t});\n\n\treturn job.start(); //=> Promise\n});\n\nconst promise = fn('input'); //=> PCancelable\n\n// …\n\npromise.cancel();\n```\n\n\n## FAQ\n\n### Cancelable vs. Cancellable\n\n[In American English, the verb cancel is usually inflected canceled and canceling—with one l.](http://grammarist.com/spelling/cancel/)<br>Both a [browser API](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable) and the [Cancelable Promises proposal](https://github.com/tc39/proposal-cancelable-promises) use this spelling.\n\n### What about the official [Cancelable Promises proposal](https://github.com/tc39/proposal-cancelable-promises)?\n\n~~It's still an early draft and I don't really like its current direction. It complicates everything and will require deep changes in the ecosystem to adapt to it. And the way you have to use cancel tokens is verbose and convoluted. I much prefer the more pragmatic and less invasive approach in this module.~~ The proposal was withdrawn.\n\n\n## Related\n\n- [p-progress](https://github.com/sindresorhus/p-progress) - Create a promise that reports progress\n- [p-lazy](https://github.com/sindresorhus/p-lazy) - Create a lazy promise that defers execution until `.then()` or `.catch()` is called\n- [More…](https://github.com/sindresorhus/promise-fun)\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/p-cancelable.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "0.5.1"
}
