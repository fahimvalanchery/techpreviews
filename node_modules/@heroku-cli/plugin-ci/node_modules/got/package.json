{
  "_args": [
    [
      {
        "raw": "got@9.2.2",
        "scope": null,
        "escapedName": "got",
        "name": "got",
        "rawSpec": "9.2.2",
        "spec": "9.2.2",
        "type": "version"
      },
      "C:\\Local Disk (E)\\Block Chain\\express\\assignment\\node_modules\\@heroku-cli\\plugin-ci"
    ]
  ],
  "_from": "got@9.2.2",
  "_hasShrinkwrap": false,
  "_id": "got@9.2.2",
  "_location": "/@heroku-cli/plugin-ci/got",
  "_nodeVersion": "8.11.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/got_9.2.2_1537161699123_0.8406477951172775"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "got@9.2.2",
    "scope": null,
    "escapedName": "got",
    "name": "got",
    "rawSpec": "9.2.2",
    "spec": "9.2.2",
    "type": "version"
  },
  "_requiredBy": [
    "/@heroku-cli/plugin-ci"
  ],
  "_resolved": "https://registry.npmjs.org/got/-/got-9.2.2.tgz",
  "_shasum": "d6cb73f40d4cb512864c2f66f275f258ab43aa25",
  "_shrinkwrap": null,
  "_spec": "got@9.2.2",
  "_where": "C:\\Local Disk (E)\\Block Chain\\express\\assignment\\node_modules\\@heroku-cli\\plugin-ci",
  "ava": {
    "concurrency": 4
  },
  "browser": {
    "decompress-response": false,
    "electron": false
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/got/issues"
  },
  "dependencies": {
    "@sindresorhus/is": "^0.11.0",
    "@szmarczak/http-timer": "^1.1.0",
    "cacheable-request": "^5.0.0",
    "decompress-response": "^3.3.0",
    "duplexer3": "^0.1.4",
    "get-stream": "^4.0.0",
    "mimic-response": "^1.0.1",
    "p-cancelable": "^0.5.0",
    "to-readable-stream": "^1.0.0",
    "url-parse-lax": "^3.0.0"
  },
  "description": "Simplified HTTP requests",
  "devDependencies": {
    "ava": "1.0.0-beta.8",
    "coveralls": "^3.0.0",
    "delay": "^4.0.0",
    "form-data": "^2.1.1",
    "get-port": "^4.0.0",
    "nyc": "^13.0.1",
    "p-event": "^2.1.0",
    "pem": "^1.4.4",
    "proxyquire": "^2.0.1",
    "sinon": "^6.1.0",
    "slow-stream": "0.0.4",
    "tempfile": "^2.0.0",
    "tempy": "^0.2.1",
    "tough-cookie": "^2.4.3",
    "xo": "^0.23.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-XLXmtO1QxLuzj6t4JBClWD1NI/bMvsR9utYl0yyPg49eUJjqU7HaQhPDvSVGwYoSbAqsRfe5aNZXHl1Zctzwmw==",
    "shasum": "d6cb73f40d4cb512864c2f66f275f258ab43aa25",
    "tarball": "https://registry.npmjs.org/got/-/got-9.2.2.tgz",
    "fileCount": 20,
    "unpackedSize": 73699,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbnznkCRA9TVsSAnZWagAA2YkP/1GpaPLyaewPZn9M6jCq\nNcLzP/aG4dFS82ML1hlTawg3g4Yf2Umyxchb7C5TqTsw7HRWWrVfMl1Xqcca\nqKslpQxCOypPNrfnQd0EAdoE56d7IWoWIzV03UZo+8Dl9qgOOdp6d5yqM6Ty\n4TAru0RRdmp3QjBGND1EVeyccBaDgYbrFcMAt2H0OS3vkIG8cTFd5sh1k6WV\nZIUxoH3nvoj2ktY2BumWi+QHEqKGSMkHOuHof+K33IGSqMR+3PL7QaV3ef1G\nhINX3QGgI1zclIS0Rn82f1qD3TejpgNYH8zTyaT023hHAYOKhl/ZVVP4BYgV\nUx/e0eNCb7ZVPFngjJqtxKQGGSAFGDfFxsMWyjEANTVYoT0pu+yak6ZMkwou\nBp0Garp9Rx8fDzbchB+HbnewRLPg1meIyWWKy4EWoW2VO+SYpFp69C27ag+6\nS2Lg9UeF+Riome0zHoMTWGBukGj6NZ7r+kjNx/1DM1noTpqMNmJI0EtwIPt1\nP8EN7XHTTmILs19jkMx56gSFTLhgowIlBw4E7oVvFWrEdMfq4PZvNaWCOGkv\nyH2Lhn7ZdAL6xLk9idgRyghNlEISuzv0PZXf8r6iWWfq/fn/00JsyiRNmvgL\nq/cMP0E1XNe5vda5Fs7ITt5pNti9IGADiXy/MGxqNVRMaiSVssHWx+ejCu4x\n0Txm\r\n=odMv\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8.6"
  },
  "files": [
    "source"
  ],
  "gitHead": "248d68c997f1c37551a4d6b56695bfe17a5db14e",
  "homepage": "https://github.com/sindresorhus/got#readme",
  "keywords": [
    "http",
    "https",
    "get",
    "got",
    "url",
    "uri",
    "request",
    "util",
    "utility",
    "simple",
    "curl",
    "wget",
    "fetch",
    "net",
    "network",
    "electron"
  ],
  "license": "MIT",
  "main": "source",
  "maintainers": [
    {
      "name": "alextes",
      "email": "alex.tesfamichael@gmail.com"
    },
    {
      "name": "floatdrop",
      "email": "floatdrop@gmail.com"
    },
    {
      "name": "kevva",
      "email": "kevinmartensson@gmail.com"
    },
    {
      "name": "lukechilds",
      "email": "lukechilds123@gmail.com"
    },
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "got",
  "optionalDependencies": {},
  "readme": "<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<p align=\"center\">Huge thanks to <a href=\"https://moxy.studio\"><img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"150\"></a> for sponsoring me!\n\t</p>\n\t<br>\n\t<br>\n</div>\n\n> Simplified HTTP requests\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got) [![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master) [![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got) [![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\nGot is a human-friendly and powerful HTTP request library.\n\nIt was created because the popular [`request`](https://github.com/request/request) package is bloated: [![Install size](https://packagephobia.now.sh/badge?p=request)](https://packagephobia.now.sh/result?p=request)\n\nGot is for Node.js. For browsers, we recommend [Ky](https://github.com/sindresorhus/ky).\n\n\n## Highlights\n\n- [Promise & stream API](#api)\n- [Request cancelation](#aborting-the-request)\n- [RFC compliant caching](#cache-adapters)\n- [Follows redirects](#followredirect)\n- [Retries on failure](#retry)\n- [Progress events](#onuploadprogress-progress)\n- [Handles gzip/deflate](#decompress)\n- [Timeout handling](#timeout)\n- [Errors with metadata](#errors)\n- [JSON mode](#json)\n- [WHATWG URL support](#url)\n- [Electron support](#useelectronnet)\n- [Instances with custom defaults](#instances)\n- [Composable](advanced-creation.md#merging-instances)\n- [Used by ~2000 packages and ~500K repos](https://github.com/sindresorhus/got/network/dependents)\n- Actively maintained\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n\n## Install\n\n```\n$ npm install got\n```\n\n<a href=\"https://www.patreon.com/sindresorhus\">\n\t<img src=\"https://c5.patreon.com/external/logo/become_a_patron_button@2x.png\" width=\"160\">\n</a>\n\n\n## Usage\n\n```js\nconst got = require('got');\n\n(async () => {\n\ttry {\n\t\tconst response = await got('sindresorhus.com');\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t} catch (error) {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t}\n})();\n```\n\n###### Streams\n\n```js\nconst fs = require('fs');\nconst got = require('got');\n\ngot.stream('sindresorhus.com').pipe(fs.createWriteStream('index.html'));\n\n// For POST, PUT, and PATCH methods `got.stream` returns a `stream.Writable`\nfs.createReadStream('index.html').pipe(got.stream.post('sindresorhus.com'));\n```\n\n\n### API\n\nIt's a `GET` request by default, but can be changed by using different methods or in the `options`.\n\n#### got(url, [options])\n\nReturns a Promise for a [`response` object](#response) or a [stream](#streams-1) if `options.stream` is set to true.\n\n##### url\n\nType: `string` `Object`\n\nThe URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\nIf no protocol is specified, it will default to `https`.\n\n##### options\n\nType: `Object`\n\nAny of the [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback) options.\n\n###### baseUrl\n\nType: `string` `Object`\n\nWhen specified, `url` will be prepended by `baseUrl`.<br>\nIf you specify an absolute URL, it will skip the `baseUrl`.\n\nVery useful when used with `got.extend()` to create niche-specific Got instances.\n\nCan be a string or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nBackslash at the end of `baseUrl` and at the beginning of the `url` argument is optional:\n\n```js\nawait got('hello', {baseUrl: 'https://example.com/v1'});\n//=> 'https://example.com/v1/hello'\n\nawait got('/hello', {baseUrl: 'https://example.com/v1/'});\n//=> 'https://example.com/v1/hello'\n\nawait got('/hello', {baseUrl: 'https://example.com/v1'});\n//=> 'https://example.com/v1/hello'\n```\n\n###### headers\n\nType: `Object`<br>\nDefault: `{}`\n\nRequest headers.\n\nExisting headers will be overwritten. Headers set to `null` will be omitted.\n\n###### stream\n\nType: `boolean`<br>\nDefault: `false`\n\nReturns a `Stream` instead of a `Promise`. This is equivalent to calling `got.stream(url, [options])`.\n\n###### body\n\nType: `string` `Buffer` `stream.Readable` [`form-data` instance](https://github.com/form-data/form-data)\n\n*If you provide this option, `got.stream()` will be read-only.*\n\nThe body that will be sent with a `POST` request.\n\nIf present in `options` and `options.method` is not set, `options.method` will be set to `POST`.\n\nThe `content-length` header will be automatically set if `body` is a `string` / `Buffer` / `fs.createReadStream` instance / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n###### cookieJar\n\nType: [`tough.CookieJar` instance](https://github.com/salesforce/tough-cookie#cookiejar)\n\nCookie support. You don't have to care about parsing or how to store them. [Example.](#cookies)\n\n**Note:** `options.headers.cookie` will be overridden.\n\n###### encoding\n\nType: `string` `null`<br>\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data. If `null`, the body is returned as a [`Buffer`](https://nodejs.org/api/buffer.html) (binary data).\n\n###### form\n\nType: `boolean`<br>\nDefault: `false`\n\n*If you provide this option, `got.stream()` will be read-only.*\n\nIf set to `true` and `Content-Type` header is not set, it will be set to `application/x-www-form-urlencoded`.\n\n`body` must be a plain object. It will be converted to a query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\n###### json\n\nType: `boolean`<br>\nDefault: `false`\n\n*If you use `got.stream()`, this option will be ignored.*\n\nIf set to `true` and `Content-Type` header is not set, it will be set to `application/json`.\n\nParse response body with `JSON.parse` and set `accept` header to `application/json`. If used in conjunction with the `form` option, the `body` will the stringified as querystring and the response parsed as JSON.\n\n`body` must be a plain object or array and will be stringified.\n\n###### query\n\nType: `string` `Object` [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n\nQuery string object that will be added to the request URL. This will override the query string in `url`.\n\n###### timeout\n\nType: `number` `Object`\n\nMilliseconds to wait for the server to end the response before aborting the request with [`got.TimeoutError`](#gottimeouterror) error (a.k.a. `request` property). By default, there's no timeout.\n\nThis also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n- `lookup` starts when a socket is assigned and ends when the hostname has been resolved. Does not apply when using a Unix domain socket.\n- `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n- `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n- `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n- `response` starts when the request has been written to the socket and ends when the response headers are received.\n- `send` starts when the socket is connected and ends with the request has been written to the socket.\n- `request` starts when the request is initiated and ends when the response's end event fires.\n\n###### retry\n\nType: `number` `Object`<br>\nDefault:\n- retries: `2`\n- methods: `GET` `PUT` `HEAD` `DELETE` `OPTIONS` `TRACE`\n- statusCodes: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- maxRetryAfter: `undefined`\n\nAn object representing `retries`, `methods`, `statusCodes` and `maxRetryAfter` fields for the time until retry, allowed methods, allowed status codes and maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.<br>\nIf [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 0).\n\nThe `retries` property can be a `number` or a `function` with `retry` and `error` arguments. The function must return a delay in milliseconds (`0` return value cancels retry).\n\n**Note:** It retries only on the specified methods, status codes, and on these network errors:\n- `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n- `ECONNRESET`: Connection was forcibly closed by a peer.\n- `EADDRINUSE`: Could not bind to any free port.\n- `ECONNREFUSED`: Connection was refused by the server.\n- `EPIPE`: The remote side of the stream being written has been closed.\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n###### decompress\n\nType: `boolean`<br>\nDefault: `true`\n\nDecompress the response automatically. This will set the `accept-encoding` header to `gzip, deflate` unless you set it yourself.\n\nIf this is disabled, a compressed response is returned as a `Buffer`. This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n###### cache\n\nType: `Object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached data.\n\n###### request\n\nType: `Function`<br>\nDefault: `http.request` `https.request` *(depending on the protocol)*\n\nCustom request function. The main purpose of this is to [support HTTP2 using a wrapper](#experimental-http2-support).\n\n###### useElectronNet\n\nType: `boolean`<br>\nDefault: `false`\n\nWhen used in Electron, Got will use [`electron.net`](https://electronjs.org/docs/api/net/) instead of the Node.js `http` module. According to the Electron docs, it should be fully compatible, but it's not entirely. See [#443](https://github.com/sindresorhus/got/issues/443) and [#461](https://github.com/sindresorhus/got/issues/461).\n\n###### throwHttpErrors\n\nType: `boolean`<br>\nDefault: `true`\n\nDetermines if a `got.HTTPError` is thrown for error responses (non-2xx status codes).\n\nIf this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing. This may be useful if you are checking for resource availability and are expecting error responses.\n\n###### agent\n\nSame as the [`agent` option](https://nodejs.org/api/http.html#http_http_request_url_options_callback) for `http.request`, but with an extra feature:\n\nIf you require different agents for different protocols, you can pass a map of agents to the `agent` option. This is necessary because a request to one protocol might redirect to another. In such a scenario, Got will switch over to the right protocol agent for you.\n\n```js\nconst got = require('got');\nconst HttpAgent = require('agentkeepalive');\nconst {HttpsAgent} = HttpAgent;\n\ngot('sindresorhus.com', {\n\tagent: {\n\t\thttp: new HttpAgent(),\n\t\thttps: new HttpsAgent()\n\t}\n});\n```\n\n###### hooks\n\nType: `Object<string, Function[]>`<br>\nDefault: `{beforeRequest: []}`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.beforeRequest\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with the normalized request options. Got will make no further changes to the request before it is sent. This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](advanced-creation.md) when you want to create an API client that, for example, uses HMAC-signing.\n\nSee the [AWS section](#aws) for an example.\n\n**Note**: Modifying the `body` is not recommended because the `content-length` header has already been computed and assigned.\n\n#### Response\n\nThe response object will typically be a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage), however, if returned from the cache it will be a [response-like object](https://github.com/lukechilds/responselike) which behaves in the same way.\n\n##### body\n\nType: `string` `Object` *(depending on `options.json`)*\n\nThe result of the request.\n\n##### url\n\nType: `string`\n\nThe request URL or the final URL after redirects.\n\n##### requestUrl\n\nType: `string`\n\nThe original request URL.\n\n##### timings\n\nType: `Object`\n\nThe object contains the following properties:\n\n- `start` - Time when the request started.\n- `socket` - Time when a socket was assigned to the request.\n- `lookup` - Time when the DNS lookup finished.\n- `connect` - Time when the socket successfully connected.\n- `upload` - Time when the request finished uploading.\n- `response` - Time when the request fired the `response` event.\n- `end` - Time when the response fired the `end` event.\n- `error` - Time when the request fired the `error` event.\n- `phases`\n\t- `wait` - `timings.socket - timings.start`\n\t- `dns` - `timings.lookup - timings.socket`\n\t- `tcp` - `timings.connect - timings.lookup`\n\t- `request` - `timings.upload - timings.connect`\n\t- `firstByte` - `timings.response - timings.upload`\n\t- `download` - `timings.end - timings.response`\n\t- `total` - `timings.end - timings.start` or `timings.error - timings.start`\n\n**Note**: The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n\n##### fromCache\n\nType: `boolean`\n\nWhether the response was retrieved from the cache.\n\n##### redirectUrls\n\nType: `Array`\n\nThe redirect URLs.\n\n##### retryCount\n\nType: `number`\n\nThe number of times the request was retried.\n\n#### Streams\n\n**Note**: Progress events, redirect events and request/response events can also be used with promises.\n\n#### got.stream(url, [options])\n\nSets `options.stream` to `true`.\n\nReturns a [duplex stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip**: You can use `request` event to abort request:\n\n```js\ngot.stream('github.com')\n\t.on('request', request => setTimeout(() => request.abort(), 50));\n```\n\n##### .on('response', response)\n\nThe `response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\nThe `redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('uploadProgress', progress)\n##### .on('downloadProgress', progress)\n\nProgress events for uploading (sending a request) and downloading (receiving a response). The `progress` argument is an object like:\n\n```js\n{\n\tpercent: 0.1,\n\ttransferred: 1024,\n\ttotal: 10240\n}\n```\n\nIf it's not possible to retrieve the body size (can happen when streaming), `total` will be `null`.\n\n```js\n(async () => {\n\tconst response = await got('sindresorhus.com')\n\t\t.on('downloadProgress', progress => {\n\t\t\t// Report download progress\n\t\t})\n\t\t.on('uploadProgress', progress => {\n\t\t\t// Report upload progress\n\t\t});\n\n\tconsole.log(response);\n})();\n```\n\n##### .on('error', error, body, response)\n\nThe `error` event emitted in case of a protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is a response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n### Instances\n\n#### got.extend([options])\n\nConfigure a new `got` instance with default `options`. `options` are merged with the parent instance's `defaults.options` using [`got.mergeOptions`](#gotmergeoptionsparentoptions-newoptions).\n\n```js\nconst client = got.extend({\n\tbaseUrl: 'https://example.com',\n\theaders: {\n\t\t'x-unicorn': 'rainbow'\n\t}\n});\n\nclient.get('/demo');\n\n/* HTTP Request =>\n * GET /demo HTTP/1.1\n * Host: example.com\n * x-unicorn: rainbow\n */\n```\n\n```js\n(async () => {\n\tconst client = got.extend({\n\t\tbaseUrl: 'httpbin.org',\n\t\theaders: {\n\t\t\t'x-foo': 'bar'\n\t\t}\n\t});\n\tconst {headers} = (await client.get('/headers', {json: true})).body;\n\t//=> headers['x-foo'] === 'bar'\n\n\tconst jsonClient = client.extend({\n\t\tjson: true,\n\t\theaders: {\n\t\t\t'x-baz': 'qux'\n\t\t}\n\t});\n\tconst {headers: headers2} = (await jsonClient.get('/headers')).body;\n\t//=> headers2['x-foo'] === 'bar'\n\t//=> headers2['x-baz'] === 'qux'\n})();\n```\n\n*Need more control over the behavior of Got? Check out the [`got.create()`](advanced-creation.md).*\n\n#### got.mergeOptions(parentOptions, newOptions)\n\nExtends parent options. Avoid using [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals) as it doesn't work recursively:\n\n```js\nconst a = {headers: {cat: 'meow', wolf: ['bark', 'wrrr']}};\nconst b = {headers: {cow: 'moo', wolf: ['auuu']}};\n\n{...a, ...b}            // => {headers: {cow: 'moo', wolf: ['auuu']}}\ngot.mergeOptions(a, b)  // => {headers: {cat: 'meow', cow: 'moo', wolf: ['auuu']}}\n```\n\nOptions are deeply merged to a new object. The value of each key is determined as follows:\n\n- If the new property is set to `undefined`, it keeps the old one.\n- If the parent property is an instance of `URL` and the new value is a `string` or `URL`, a new URL instance is created: [`new URL(new, parent)`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Syntax).\n- If the new property is a plain `Object`:\n\t- If the parent property is a plain `Object` too, both values are merged recursively into a new `Object`.\n\t- Otherwise, only the new value is deeply cloned.\n- If the new property is an `Array`, it overwrites the old one with a deep clone of the new property.\n- Otherwise, the new value is assigned to the key.\n\n## Errors\n\nEach error contains (if available) `statusCode`, `statusMessage`, `host`, `hostname`, `method`, `path`, `protocol` and `url` properties to make debugging easier.\n\nIn Promise mode, the `response` is attached to the error.\n\n#### got.CacheError\n\nWhen a cache method fails, for example, if the database goes down or there's a filesystem error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen `json` option is enabled, server response code is 2xx, and `JSON.parse` fails.\n\n#### got.HTTPError\n\nWhen the server response code is not 2xx. Includes `statusCode`, `statusMessage`, and `redirectUrls` properties.\n\n#### got.MaxRedirectsError\n\nWhen the server redirects you more than ten times. Includes a `redirectUrls` property, which is an array of the URLs Got was redirected to before giving up.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n#### got.CancelError\n\nWhen the request is aborted with `.cancel()`.\n\n#### got.TimeoutError\n\nWhen the request is aborted due to a [timeout](#timeout)\n\n## Aborting the request\n\nThe promise returned by Got has a [`.cancel()`](https://github.com/sindresorhus/p-cancelable) method which when called, aborts the request.\n\n```js\n(async () => {\n\tconst request = got(url, options);\n\n\t// …\n\n\t// In another part of the code\n\tif (something) {\n\t\trequest.cancel();\n\t}\n\n\t// …\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\tif (request.isCanceled) { // Or `error instanceof got.CancelError`\n\t\t\t// Handle cancelation\n\t\t}\n\n\t\t// Handle other errors\n\t}\n})();\n```\n\n<a name=\"cache-adapters\"></a>\n## Cache\n\nGot implements [RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching which works out of the box in-memory and is easily pluggable with a wide range of storage adapters. Fresh cache entries are served directly from the cache, and stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers. You can read more about the underlying cache behavior in the [`cacheable-request` documentation](https://github.com/lukechilds/cacheable-request).\n\nYou can use the JavaScript `Map` type as an in-memory cache:\n\n```js\nconst got = require('got');\nconst map = new Map();\n\n(async () => {\n\t\tlet response = await got('sindresorhus.com', {cache: map});\n\t\tconsole.log(response.fromCache);\n\t\t//=> false\n\n\t\tresponse = await got('sindresorhus.com', {cache: map});\n\t\tconsole.log(response.fromCache);\n\t\t//=> true\n})();\n```\n\nGot uses [Keyv](https://github.com/lukechilds/keyv) internally to support a wide range of storage adapters. For something more scalable you could use an [official Keyv storage adapter](https://github.com/lukechilds/keyv#official-storage-adapters):\n\n```\n$ npm install @keyv/redis\n```\n\n```js\nconst got = require('got');\nconst KeyvRedis = require('@keyv/redis');\n\nconst redis = new KeyvRedis('redis://user:pass@localhost:6379');\n\ngot('sindresorhus.com', {cache: redis});\n```\n\nGot supports anything that follows the Map API, so it's easy to write your own storage adapter or use a third-party solution.\n\nFor example, the following are all valid storage adapters:\n\n```js\nconst storageAdapter = new Map();\n// Or\nconst storageAdapter = require('./my-storage-adapter');\n// Or\nconst QuickLRU = require('quick-lru');\nconst storageAdapter = new QuickLRU({maxSize: 1000});\n\ngot('sindresorhus.com', {cache: storageAdapter});\n```\n\nView the [Keyv docs](https://github.com/lukechilds/keyv) for more information on how to use storage adapters.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) package with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel-agent');\n\ngot('sindresorhus.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\nCheck out [`global-tunnel`](https://github.com/np-maintain/global-tunnel) if you want to configure proxy support for all HTTP/HTTPS traffic in your app.\n\n\n## Cookies\n\nYou can use the [`tough-cookie`](https://github.com/salesforce/tough-cookie) package:\n\n```js\nconst got = require('got');\nconst {CookieJar} = require('tough-cookie');\n\nconst cookieJar = new CookieJar();\ncookieJar.setCookie('foo=bar', 'https://www.google.com');\n\ngot('google.com', {cookieJar});\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) package to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('google.com', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) package to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tjson: true\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - Absolute path to a unix domain socket, for example: `/var/run/docker.sock`\n- `PATH` - Request path, for example: `/v2/keys`\n\n```js\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// Or without protocol (HTTP by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an [\"API Gateway\"](https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/) with a signed request.\n\n```js\nconst AWS = require('aws-sdk');\nconst aws4 = require('aws4');\nconst got = require('got');\n\nconst chain = new AWS.CredentialProviderChain();\n\n// Create a Got instance to use relative paths and signed requests\nconst awsClient = got.extend({\n\tbaseUrl: 'https://<api-id>.execute-api.<api-region>.amazonaws.com/<stage>/',\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync options => {\n\t\t\t\tconst credentials = await chain.resolvePromise();\n\t\t\t\taws4.sign(options, credentials);\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await awsClient('endpoint/path', {\n\t// Request-specific options\n});\n```\n\n\n## Testing\n\nYou can test your requests by using the [`nock`](https://github.com/node-nock/nock) package to mock an endpoint:\n\n```js\nconst got = require('got');\nconst nock = require('nock');\n\nnock('https://sindresorhus.com')\n\t.get('/')\n\t.reply(200, 'Hello world!');\n\n(async () => {\n\tconst response = await got('sindresorhus.com');\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n})();\n```\n\nIf you need real integration tests you can use [`create-test-server`](https://github.com/lukechilds/create-test-server):\n\n```js\nconst got = require('got');\nconst createTestServer = require('create-test-server');\n\n(async () => {\n\tconst server = await createTestServer();\n\tserver.get('/', 'Hello world!');\n\n\tconst response = await got(server.url);\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n\n\tawait server.close();\n})();\n```\n\n\n## Tips\n\n### User Agent\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo. You can omit this header by setting it to `null`.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\ngot('sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': null\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind; if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It's your responsibility to cache and retrieve the body contents.\n\n### Custom endpoints\n\nUse `got.extend()` to make it nicer to work with REST APIs. Especially if you use the `baseUrl` option.\n\n**Note:** Not to be confused with [`got.create()`](advanced-creation.md), which has no defaults.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\nconst custom = got.extend({\n\tbaseUrl: 'example.com',\n\tjson: true,\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\n// Use `custom` exactly how you use `got`\n(async () => {\n\tconst list = await custom('/v1/users/list');\n})();\n```\n\n*Need to merge some instances into a single one? Check out [`got.mergeInstances()`](advanced-creation.md#merging-instances).*\n\n### Experimental HTTP2 support\n\nGot provides an experimental support for HTTP2 using the [`http2-wrapper`](https://github.com/szmarczak/http2-wrapper) package:\n\n```js\nconst got = require('got');\nconst {request} = require('http2-wrapper');\n\nconst h2got = got.extend({request});\n\n(async () => {\n\tconst {body} = await h2got('https://nghttp2.org/httpbin/headers');\n\tconsole.log(body);\n})();\n```\n\n## Comparison\n\n|                       |     `got`    |   `request`  | `node-fetch` |    `axios`   |\n|-----------------------|:------------:|:------------:|:------------:|:------------:|\n| HTTP/2 support        |      ❔      |       ✖      |       ✖      |       ✖      |\n| Browser support       |       ✖      |       ✖      |       ✔*     |       ✔      |\n| Electron support      |       ✔      |       ✖      |       ✖      |       ✖      |\n| Promise API           |       ✔      |       ✔      |       ✔      |       ✔      |\n| Stream API            |       ✔      |       ✔      |       ✖      |       ✖      |\n| Request cancelation   |       ✔      |       ✖      |       ✖      |       ✔      |\n| RFC compliant caching |       ✔      |       ✖      |       ✖      |       ✖      |\n| Cookies (out-of-box)  |       ✔      |       ✔      |       ✖      |       ✖      |\n| Follows redirects     |       ✔      |       ✔      |       ✔      |       ✔      |\n| Retries on failure    |       ✔      |       ✖      |       ✖      |       ✖      |\n| Progress events       |       ✔      |       ✖      |       ✖      | Browser only |\n| Handles gzip/deflate  |       ✔      |       ✔      |       ✔      |       ✔      |\n| Advanced timeouts     |       ✔      |       ✖      |       ✖      |       ✖      |\n| Timings               |       ✔      |       ✔      |       ✖      |       ✖      |\n| Errors with metadata  |       ✔      |       ✖      |       ✖      |       ✔      |\n| JSON mode             |       ✔      |       ✔      |       ✖      |       ✔      |\n| Custom defaults       |       ✔      |       ✔      |       ✖      |       ✔      |\n| Composable            |       ✔      |       ✖      |       ✖      |       ✖      |\n| Hooks                 |       ✔      |       ✖      |       ✖      |       ✔      |\n| Issues open           |   ![][gio]   |   ![][rio]   |   ![][nio]   |   ![][aio]   |\n| Issues closed         |   ![][gic]   |   ![][ric]   |   ![][nic]   |   ![][aic]   |\n| Downloads             |    ![][gd]   |    ![][rd]   |    ![][nd]   |    ![][ad]   |\n| Coverage              |    ![][gc]   |    ![][rc]   |    ![][nc]   |    ![][ac]   |\n| Build                 |    ![][gb]   |    ![][rb]   |    ![][nb]   |    ![][ab]   |\n| Bugs                  |   ![][gbg]   |   ![][rbg]   |   ![][nbg]   |   ![][abg]   |\n| Dependents            |   ![][gdp]   |   ![][rdp]   |   ![][ndp]   |   ![][adp]   |\n| Install size          |   ![][gis]   |   ![][ris]   |   ![][nis]   |   ![][ais]   |\n\n\\* It's almost API compatible with the browser `fetch` API.<br>\n❔ Experimental support.\n\n<!-- ISSUES OPEN -->\n[gio]: https://img.shields.io/github/issues/sindresorhus/got.svg\n[rio]: https://img.shields.io/github/issues/request/request.svg\n[nio]: https://img.shields.io/github/issues/bitinn/node-fetch.svg\n[aio]: https://img.shields.io/github/issues/axios/axios.svg\n\n<!-- ISSUES CLOSED -->\n[gic]: https://img.shields.io/github/issues-closed/sindresorhus/got.svg\n[ric]: https://img.shields.io/github/issues-closed/request/request.svg\n[nic]: https://img.shields.io/github/issues-closed/bitinn/node-fetch.svg\n[aic]: https://img.shields.io/github/issues-closed/axios/axios.svg\n\n<!-- DOWNLOADS -->\n[gd]: https://img.shields.io/npm/dm/got.svg\n[rd]: https://img.shields.io/npm/dm/request.svg\n[nd]: https://img.shields.io/npm/dm/node-fetch.svg\n[ad]: https://img.shields.io/npm/dm/axios.svg\n\n<!-- COVERAGE -->\n[gc]: https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master\n[rc]: https://coveralls.io/repos/github/request/request/badge.svg?branch=master\n[nc]: https://coveralls.io/repos/github/bitinn/node-fetch/badge.svg?branch=master\n[ac]: https://coveralls.io/repos/github/mzabriskie/axios/badge.svg?branch=master\n\n<!-- BUILD -->\n[gb]: https://travis-ci.org/sindresorhus/got.svg?branch=master\n[rb]: https://travis-ci.org/request/request.svg?branch=master\n[nb]: https://travis-ci.org/bitinn/node-fetch.svg?branch=master\n[ab]: https://travis-ci.org/axios/axios.svg?branch=master\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open\n[abg]: https://badgen.net/github/label-issues/axios/axios/bug/open\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got\n[rdp]: https://badgen.net/npm/dependents/request\n[ndp]: https://badgen.net/npm/dependents/node-fetch\n[adp]: https://badgen.net/npm/dependents/axios\n\n<!-- INSTALL SIZE -->\n[gis]: https://packagephobia.now.sh/badge?p=got\n[ris]: https://packagephobia.now.sh/badge?p=request\n[nis]: https://packagephobia.now.sh/badge?p=node-fetch\n[ais]: https://packagephobia.now.sh/badge?p=axios\n\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [gl-got](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n- [GotQL](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Vsevolod Strukchinsky](https://github.com/floatdrop.png?size=100)](https://github.com/floatdrop) | [![Alexander Tesfamichael](https://github.com/AlexTes.png?size=100)](https://github.com/AlexTes) | [![Luke Childs](https://github.com/lukechilds.png?size=100)](https://github.com/lukechilds) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak) | [![Brandon Smith](https://github.com/brandon93s.png?size=100)](https://github.com/brandon93s)\n---|---|---|---|---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Vsevolod Strukchinsky](https://github.com/floatdrop) | [Alexander Tesfamichael](https://alextes.me) | [Luke Childs](https://github.com/lukechilds) | [Szymon Marczak](https://github.com/szmarczak) | [Brandon Smith](https://github.com/brandon93s)\n\n\n## License\n\nMIT\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/got.git"
  },
  "scripts": {
    "test": "xo && nyc ava"
  },
  "version": "9.2.2"
}
