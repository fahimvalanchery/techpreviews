{
  "_args": [
    [
      {
        "raw": "tunnel-ssh@^4.1.4",
        "scope": null,
        "escapedName": "tunnel-ssh",
        "name": "tunnel-ssh",
        "rawSpec": "^4.1.4",
        "spec": ">=4.1.4 <5.0.0",
        "type": "range"
      },
      "C:\\Local Disk (E)\\Block Chain\\express\\assignment\\node_modules\\@heroku-cli\\plugin-pg-v5"
    ]
  ],
  "_from": "tunnel-ssh@>=4.1.4 <5.0.0",
  "_id": "tunnel-ssh@4.1.4",
  "_inCache": true,
  "_location": "/tunnel-ssh",
  "_nodeVersion": "9.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/tunnel-ssh_4.1.4_1519705669130_0.30190412903977326"
  },
  "_npmUser": {
    "name": "agebrock",
    "email": "christoph.hagenbrock@googlemail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tunnel-ssh@^4.1.4",
    "scope": null,
    "escapedName": "tunnel-ssh",
    "name": "tunnel-ssh",
    "rawSpec": "^4.1.4",
    "spec": ">=4.1.4 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@heroku-cli/plugin-pg-v5"
  ],
  "_resolved": "https://registry.npmjs.org/tunnel-ssh/-/tunnel-ssh-4.1.4.tgz",
  "_shasum": "b301f7733c73dcea1616466b9c87b607f4958b45",
  "_shrinkwrap": null,
  "_spec": "tunnel-ssh@^4.1.4",
  "_where": "C:\\Local Disk (E)\\Block Chain\\express\\assignment\\node_modules\\@heroku-cli\\plugin-pg-v5",
  "author": {
    "name": "Christoph Hagenbrock",
    "email": "christoph.hagenbrock@googlemail.com"
  },
  "bugs": {
    "url": "https://github.com/agebrock/tunnel-ssh/issues"
  },
  "dependencies": {
    "debug": "2.6.9",
    "lodash.defaults": "^4.1.0",
    "ssh2": "0.5.4"
  },
  "description": "Easy extendable SSH tunnel",
  "devDependencies": {
    "chai": "3.5.0",
    "eslint": "^3.2.2",
    "eslint-config-xo": "^0.17.0",
    "mocha": "^3.5.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-CjBqboGvAbM7iXSX2F95kzoI+c2J81YkrHbyyo4SWNKCzU6w5LfEvXBCHu6PPriYaNvfhMKzD8bFf5Vl14YTtg==",
    "shasum": "b301f7733c73dcea1616466b9c87b607f4958b45",
    "tarball": "https://registry.npmjs.org/tunnel-ssh/-/tunnel-ssh-4.1.4.tgz",
    "fileCount": 14,
    "unpackedSize": 22062
  },
  "eslintConfig": {
    "extends": "xo",
    "env": {
      "mocha": true
    },
    "rules": {
      "indent": [
        "error",
        4
      ]
    }
  },
  "gitHead": "a3ac972612e36ed588e2bd2f366169b2b2628832",
  "homepage": "https://github.com/agebrock/tunnel-ssh#readme",
  "keywords": [
    "tunnel",
    "ssh",
    "mysql",
    "develop",
    "net"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "agebrock",
      "email": "christoph.hagenbrock@googlemail.com"
    }
  ],
  "name": "tunnel-ssh",
  "optionalDependencies": {},
  "readme": "Tunnel-SSH\n==========\n\nOne to connect them all !\n\n![Tunnel-SSH Logo](http://i.imgur.com/I5PRnDD.jpg)\n\nTunnel-ssh is based on the fantastic [ssh2](https://github.com/mscdex/ssh2) library by Brian White.\nTrouble ? Please study the ssh2 configuration.\n\n### Latest Relese 4.1.3\n\n## Release notes\n* Closing sshconnections correctly thx @actionshrimp\n* Improved readme\n* Updated modules\n\nSpecial thanks to\n@vweevers and @dickeyxxx\n\n\n### Related projects\n* [If you don't want to wrap a tunnel around your code: inject-tunnel-ssh](https://github.com/agebrock/inject-tunnel-ssh)\n* [If you need it the other way around: reverse-tunnel-ssh](https://github.com/agebrock/reverse-tunnel-ssh)\n\n### Integration\nBy default tunnel-ssh will close the tunnel after a client disconnects, so your cli tools should work in the same way, they do if you connect directly.\nIf you need the tunnel to stay open, use the \"keepAlive:true\" option within\nthe configuration.\n\n\n```js\n\n    var config = {\n      ...\n      keepAlive:true\n    };\n\n    var tnl = tunnel(config, function(error, tnl){\n          yourClient.connect();\n          yourClient.disconnect();\n          setTimeout(function(){\n            // you only need to close the tunnel by yourself if you set the\n            // keepAlive:true option in the configuration !\n            tnl.close();\n          },2000);\n      });\n\n    // you can also close the tunnel from here...\n    setTimeout(function(){\n      tnl.close();\n    },2000);\n\n```\n\n\n## Understanding the configuration\n\n1. A local server listening for connections to forward via ssh\nDescription: This is where you bind your interface.\nProperties:\n** localHost (default is '127.0.0.1')\n** localPort (default is dstPort)\n\n\n2. The ssh configuration\nDescription: The host you want to use as ssh-tunnel server.\nProperties:\n** host\n** port (22)\n** username\n** ...\n\n\n3. The destination host configuration (based on the ssh host)\nImagine you just connected to The host you want to connect to. (via host:port)\nnow that server connects requires a target to tunnel to.\nProperties:\n** dstHost (localhost)\n** dstPort\n\n\n### Config example\n\n```js\n\n    var config = {\n      username:'root',\n      Password:'secret',\n      host:sshServer,\n      port:22,\n      dstHost:destinationServer,\n      dstPort:27017,\n      localHost:'127.0.0.1',\n      localPort: 27000\n    };\n\n    var tunnel = require('tunnel-ssh');\n    tunnel(config, function (error, server) {\n      //....\n    });\n```\n#### Sugar configuration\n\ntunnel-ssh assumes that you want to map the same port on a remote machine to your localhost using the ssh-server on the remote machine.\n\n\n```js\n\n    var config = {\n      username:'root',\n      dstHost:'remotehost.with.sshserver.com',\n      dstPort:27017,\n      privateKey:require(fs).readFileSync('/path/to/key'),\n      passphrase:'secret'\n    };\n\n```\n\n#### More configuration options\ntunnel-ssh pipes the configuration direct into the ssh2 library so every config option provided by ssh2 still works.\n[ssh2 configuration](https://github.com/mscdex/ssh2#client-methods)\n\n\n#### catching errors:\n```js\n    var tunnel = require('tunnel-ssh');\n    //map port from remote 3306 to localhost 3306\n    var server = tunnel({host: '172.16.0.8', dstPort: 3306}, function (error, server) {\n       if(error){\n        //catch configuration and startup errors here.\n       }\n    });\n\n    // Use a listener to handle errors outside the callback\n    server.on('error', function(err){\n        console.error('Something bad happened:', err);\n    });\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/agebrock/tunnel-ssh.git"
  },
  "scripts": {
    "test": "mocha && eslint ."
  },
  "version": "4.1.4"
}
