{
  "_args": [
    [
      {
        "raw": "@oclif/plugin-plugins@1.7.2",
        "scope": "@oclif",
        "escapedName": "@oclif%2fplugin-plugins",
        "name": "@oclif/plugin-plugins",
        "rawSpec": "1.7.2",
        "spec": "1.7.2",
        "type": "version"
      },
      "C:\\Local Disk (E)\\Block Chain\\express\\assignment\\node_modules\\heroku"
    ]
  ],
  "_from": "@oclif/plugin-plugins@1.7.2",
  "_hasShrinkwrap": false,
  "_id": "@oclif/plugin-plugins@1.7.2",
  "_location": "/@oclif/plugin-plugins",
  "_nodeVersion": "10.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/plugin-plugins_1.7.2_1539401266344_0.01422219548521686"
  },
  "_npmUser": {
    "name": "rasphilco",
    "email": "philipe@heroku.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@oclif/plugin-plugins@1.7.2",
    "scope": "@oclif",
    "escapedName": "@oclif%2fplugin-plugins",
    "name": "@oclif/plugin-plugins",
    "rawSpec": "1.7.2",
    "spec": "1.7.2",
    "type": "version"
  },
  "_requiredBy": [
    "/heroku"
  ],
  "_resolved": "https://registry.npmjs.org/@oclif/plugin-plugins/-/plugin-plugins-1.7.2.tgz",
  "_shasum": "5b0eb8260186fec9037be4be29cf1b85e93ce0b5",
  "_shrinkwrap": null,
  "_spec": "@oclif/plugin-plugins@1.7.2",
  "_where": "C:\\Local Disk (E)\\Block Chain\\express\\assignment\\node_modules\\heroku",
  "author": {
    "name": "Jeff Dickey @jdxcode"
  },
  "bugs": {
    "url": "https://github.com/oclif/plugin-plugins/issues"
  },
  "dependencies": {
    "@oclif/color": "^0.0.0",
    "@oclif/command": "^1.5.3",
    "chalk": "^2.4.1",
    "cli-ux": "^4.9.0",
    "debug": "^4.1.0",
    "fs-extra": "^7.0.0",
    "http-call": "^5.2.2",
    "load-json-file": "^5.1.0",
    "npm-run-path": "^2.0.2",
    "semver": "^5.6.0",
    "tslib": "^1.9.3",
    "yarn": "^1.10.1"
  },
  "description": "plugins plugin for oclif",
  "devDependencies": {
    "@oclif/config": "^1.8.7",
    "@oclif/dev-cli": "^1.19.1",
    "@oclif/errors": "^1.2.1",
    "@oclif/plugin-help": "^2.1.2",
    "@oclif/test": "^1.2.1",
    "@oclif/tslint": "^3.1.0",
    "@types/chai": "^4.1.6",
    "@types/fs-extra": "^5.0.4",
    "@types/mocha": "^5.2.5",
    "@types/node": "^10.11.7",
    "@types/semver": "^5.5.0",
    "@types/supports-color": "^5.3.0",
    "chai": "^4.2.0",
    "fancy-test": "^1.4.1",
    "globby": "^8.0.1",
    "mocha": "^5.2.0",
    "ts-node": "^7.0.1",
    "tslint": "^5.11.0",
    "typescript": "^3.1.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-cmYu9GA4/MGGzfAb4w56xHnXusnkLTzmORSTHKgpRsf5rVCXk1hA7EE4+SxBWAl44GDyBuUlU+lqk0pK+WveYQ==",
    "shasum": "5b0eb8260186fec9037be4be29cf1b85e93ce0b5",
    "tarball": "https://registry.npmjs.org/@oclif/plugin-plugins/-/plugin-plugins-1.7.2.tgz",
    "fileCount": 25,
    "unpackedSize": 56658,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbwWYzCRA9TVsSAnZWagAAaRoP/iwdwkDngq5+4Mkw6W41\nmFk9NCofySY+R8KYZFXNhDPBAePkHt5wSW0a4ePJdNKjhVRqQL49WtfP7RXJ\niAT/k60aw4UDOZRAs0Y+n5RYNJZDdkJDbSF5vARL9VDwrhb6erKHkyn1B3X4\nG8V/CceaR3yWtKgx2KiiTcDGDz5stTkFXbnzZhd9dJJih23d6lL2Rco2gb0k\nIaAEJN0Lg2A0oMR8E32bOac3Dz2EhKKyY8R7cvUHeJ1B5iLlF2yeXsh+0T+l\n4vJ7r+WvV3be3pztbm4B9Bg8Dz4Y4tjTFwfpxhzlvkXeMyog57MOvZZeok0m\n7S1dLH3WJ70lF7YquXvzscVL5B3EKCIL12TfoNeFjZo/PeXB3fiqC9G3TIlK\nHeXSzmtQlObCh2LzYjwA+UCzorqRmLMAagEGnj5OZnbWy6mlTUl3TcMW5WrD\nzcMcMqkHEECWmojXzRzyEHhZzG+X5Pg+ijhFDLzEvyQnz6R0NLViee1d0gWk\n9BOgu3x+vo8IrscM2c/L4GF63vdegtDDqkUXcLG9OycWFvwhLDd5QhYzTFM5\n13B07lEgT2+MOu/Fx3DvAs+Lu/s32tu0cwmbsjzxbDvWSQmvReqYKJFDAcCe\nOePpgWYxOZ2I64blcwurZu2RhgFq0WDti1z99tcjff29cpYGWb8LtNRaUzrU\n5MJ4\r\n=o8tD\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "files": [
    "oclif.manifest.json",
    "/lib"
  ],
  "gitHead": "9d4ea9cd0c188491b483c1e74e3e57c65e1ef5e9",
  "homepage": "https://github.com/oclif/plugin-plugins",
  "keywords": [
    "oclif-plugin"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "anycli-bot",
      "email": "jdxcode+anycli@gmail.com"
    },
    {
      "name": "dickeyxxx",
      "email": "dickeytk+npm@gmail.com"
    },
    {
      "name": "oclif-bot",
      "email": "jdxcode+oclif@gmail.com"
    },
    {
      "name": "rasphilco",
      "email": "philipe@heroku.com"
    }
  ],
  "name": "@oclif/plugin-plugins",
  "oclif": {
    "commands": "./lib/commands",
    "scope": "heroku-cli",
    "hooks": {
      "update": "./lib/hooks/update.js"
    },
    "devPlugins": [
      "@oclif/plugin-help"
    ],
    "aliases": {
      "aliasme": "oclif-debug"
    },
    "bin": "mycli"
  },
  "optionalDependencies": {},
  "readme": "@oclif/plugin-plugins\n=====================\n\nplugins plugin for oclif\n\n[![Version](https://img.shields.io/npm/v/@oclif/plugin-plugins.svg)](https://npmjs.org/package/@oclif/plugin-plugins)\n[![CircleCI](https://circleci.com/gh/oclif/plugin-plugins/tree/master.svg?style=shield)](https://circleci.com/gh/oclif/plugin-plugins/tree/master)\n[![Appveyor CI](https://ci.appveyor.com/api/projects/status/github/oclif/plugin-plugins?branch=master&svg=true)](https://ci.appveyor.com/project/oclif/plugin-plugins/branch/master)\n[![Codecov](https://codecov.io/gh/oclif/plugin-plugins/branch/master/graph/badge.svg)](https://codecov.io/gh/oclif/plugin-plugins)\n[![Known Vulnerabilities](https://snyk.io/test/github/oclif/plugin-plugins/badge.svg)](https://snyk.io/test/github/oclif/plugin-plugins)\n[![Downloads/week](https://img.shields.io/npm/dw/@oclif/plugin-plugins.svg)](https://npmjs.org/package/@oclif/plugin-plugins)\n[![License](https://img.shields.io/npm/l/@oclif/plugin-plugins.svg)](https://github.com/oclif/plugin-plugins/blob/master/package.json)\n\n<!-- toc -->\n* [What is this?](#what-is-this)\n* [Usage](#usage)\n* [Friendly names](#friendly-names)\n* [Commands](#commands)\n<!-- tocstop -->\n\n# What is this?\n\nThis plugin is used to allow users to install plugins into your oclif CLI at runtime. For example, in the Heroku CLI this is used to allow people to install plugins such as the Heroku Kafka plugin:\n\n```sh-session\n$ heroku plugins:install heroku-kafka\n$ heroku kafka\n```\n\nThis is useful to allow users to create their own plugins to work in your CLI or to allow you to build functionality that users can optionally install.\n\nOne particular way this is useful is for building functionality you aren't ready to include in a public repository. Build your plugin separately as a plugin, then include it as a core plugin later into your CLI.\n\n# Usage\n\nFirst add the plugin to your project with `yarn add @oclif/plugin-plugins`, then add it to the `package.json` of the oclif CLI:\n\n```js\n{\n  \"name\": \"mycli\",\n  \"version\": \"0.0.0\",\n  // ...\n  \"oclif\": {\n    \"plugins\": [\"@oclif/plugin-help\", \"@oclif/plugin-plugins\"]\n  }\n}\n```\n\nNow the user can run any of the commands below to manage plugins at runtime.\n\n# Friendly names\n\nTo make it simpler for users to install plugins, we have \"friendly name\" functionality. With this, you can run `mycli plugins:install myplugin` and it will first check if `@mynpmorg/plugin-myplugin` exists on npm before trying to install `myplugin`. This is useful if you want to use a generic name that's already taken in npm.\n\nTo set this up, simply set the `oclif.scope` to the name of your npm org. In the example above, this would be `mynpmorg`.\n\n# Commands\n<!-- commands -->\n* [`mycli plugins`](#mycli-plugins)\n* [`mycli plugins:install PLUGIN...`](#mycli-pluginsinstall-plugin)\n* [`mycli plugins:link PLUGIN`](#mycli-pluginslink-plugin)\n* [`mycli plugins:uninstall PLUGIN...`](#mycli-pluginsuninstall-plugin)\n* [`mycli plugins:update`](#mycli-pluginsupdate)\n\n## `mycli plugins`\n\nlist installed plugins\n\n```\nUSAGE\n  $ mycli plugins\n\nOPTIONS\n  --core  show core plugins\n\nEXAMPLE\n  $ mycli plugins\n```\n\n_See code: [src/commands/plugins/index.ts](https://github.com/oclif/plugin-plugins/blob/v1.7.2/src/commands/plugins/index.ts)_\n\n## `mycli plugins:install PLUGIN...`\n\ninstalls a plugin into the CLI\n\n```\nUSAGE\n  $ mycli plugins:install PLUGIN...\n\nARGUMENTS\n  PLUGIN  plugin to install\n\nOPTIONS\n  -h, --help     show CLI help\n  -v, --verbose\n\nDESCRIPTION\n  Can be installed from npm or a git url.\n\n  Installation of a user-installed plugin will override a core plugin.\n\n  e.g. If you have a core plugin that has a 'hello' command, installing a user-installed plugin with a 'hello' command \n  will override the core plugin implementation. This is useful if a user needs to update core plugin functionality in \n  the CLI without the need to patch and update the whole CLI.\n\nALIASES\n  $ mycli plugins:add\n\nEXAMPLES\n  $ mycli plugins:install myplugin \n  $ mycli plugins:install https://github.com/someuser/someplugin\n  $ mycli plugins:install someuser/someplugin\n```\n\n_See code: [src/commands/plugins/install.ts](https://github.com/oclif/plugin-plugins/blob/v1.7.2/src/commands/plugins/install.ts)_\n\n## `mycli plugins:link PLUGIN`\n\nlinks a plugin into the CLI for development\n\n```\nUSAGE\n  $ mycli plugins:link PLUGIN\n\nARGUMENTS\n  PATH  [default: .] path to plugin\n\nOPTIONS\n  -h, --help     show CLI help\n  -v, --verbose\n\nDESCRIPTION\n  Installation of a linked plugin will override a user-installed or core plugin.\n\n  e.g. If you have a user-installed or core plugin that has a 'hello' command, installing a linked plugin with a 'hello' \n  command will override the user-installed or core plugin implementation. This is useful for development work.\n\nEXAMPLE\n  $ mycli plugins:link myplugin\n```\n\n_See code: [src/commands/plugins/link.ts](https://github.com/oclif/plugin-plugins/blob/v1.7.2/src/commands/plugins/link.ts)_\n\n## `mycli plugins:uninstall PLUGIN...`\n\nremoves a plugin from the CLI\n\n```\nUSAGE\n  $ mycli plugins:uninstall PLUGIN...\n\nARGUMENTS\n  PLUGIN  plugin to uninstall\n\nOPTIONS\n  -h, --help     show CLI help\n  -v, --verbose\n\nALIASES\n  $ mycli plugins:unlink\n  $ mycli plugins:remove\n```\n\n_See code: [src/commands/plugins/uninstall.ts](https://github.com/oclif/plugin-plugins/blob/v1.7.2/src/commands/plugins/uninstall.ts)_\n\n## `mycli plugins:update`\n\nupdate installed plugins\n\n```\nUSAGE\n  $ mycli plugins:update\n\nOPTIONS\n  -h, --help     show CLI help\n  -v, --verbose\n```\n\n_See code: [src/commands/plugins/update.ts](https://github.com/oclif/plugin-plugins/blob/v1.7.2/src/commands/plugins/update.ts)_\n<!-- commandsstop -->\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/oclif/plugin-plugins.git"
  },
  "scripts": {
    "build": "rm -rf lib && tsc",
    "clean": "rm -f .oclif.manifest.json",
    "lint": "tsc -p test --noEmit && tslint -p test -t stylish",
    "postpublish": "yarn run clean",
    "posttest": "yarn run lint",
    "prepublishOnly": "yarn run build && oclif-dev manifest && oclif-dev readme",
    "preversion": "yarn run clean",
    "test": "mocha --forbid-only \"test/**/*.test.ts\"",
    "version": "oclif-dev readme && git add README.md"
  },
  "types": "lib/index.d.ts",
  "version": "1.7.2"
}
